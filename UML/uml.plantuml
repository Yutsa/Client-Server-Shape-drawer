@startuml
package Client {
    abstract class Shape {
        +{abstract} draw(const DrawingVisitor* visitor)
        +{abstract} toString() : String
        +{abstract} save(const SaveVisitor* saveVisitor, const string & filename)
        +{abstract} translation(Vector2D translationVector)
        +{abstract} homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +{abstract} rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +{abstract} getArea()
    }

    abstract class ComposedShape {
        +draw(DrawingVisitor* visitor)
        +toString() : String
        +save(SaveVisitor* saveVisitor, const string & filename)
        +translation(Vector2D translationVector)
        +homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +getArea()
    }

    class Cercle {
        +draw(DrawingVisitor* visitor)
        +toString() : String
        +save(SaveVisitor* saveVisitor, const string & filename)
        +translation(Vector2D translationVector)
        +homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +getArea()
    }
    class Segment {
        +draw(DrawingVisitor* visitor)
        +toString() : String
        +save(SaveVisitor* saveVisitor, const string & filename)
        +translation(Vector2D translationVector)
        +homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +getArea()
    }
    class Triangle {
        +draw(DrawingVisitor* visitor)
        +toString() : String
        +save(SaveVisitor* saveVisitor, const string & filename)
        +translation(Vector2D translationVector)
        +homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +getArea()
    }
    class Polygone {
        +draw(DrawingVisitor* visitor)
        +toString() : String
        +save(SaveVisitor* saveVisitor, const string & filename)
        +translation(Vector2D translationVector)
        +homothétie(const Vector2D & invariantPoint,
            const double & homothetyRatio)
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +getArea()
    }
    class Socket << Singleton >> {
        -instance: Socket
        -Socket()
        +getInstance() : Socket
        +createConnexion()
        +sendRequest(const string & request)
        +closeSocket()
    }

    abstract class DrawingVisitor {
        +{abstract} draw(Cercle *s)
        +{abstract} draw(Segment *s)
        +{abstract} draw(Triangle *s)
        +{abstract} draw(Polygone *s)
    }

    abstract class SaveVisitor {
        +{abstract} save(Cercle *s, const string & filename)
        +{abstract} save(Segment *s, const string & filename)
        +{abstract} save(Triangle *s, const string & filename)
        +{abstract} save(Polygone *s, const string & filename)
    }

    class ServerDrawer {
        +ServerDrawer()
        +draw(Cercle *s)
        +draw(Segment *s)
        +draw(Triangle *s)
        +draw(Polygone *s)
    }

    class SaveXMLVisitor {
        +save(Cercle *s)
        +save(Segment *s)
        +save(Triangle *s)
        +save(Polygone *s)
    }

    abstract class ShapeLoader {
        +{abstract} load()
    }

    class ShapeLoaderCOR {
        +ShapeLoaderCOR(ShapeLoaderCOR* next)
        +load()
        +{abstract}loadShape()
    }

    class ShapeLoaderText {
        +ShapeLoaderText(ShapeLoaderCOR* next)
        +loadShape()
    }

    class ShapeLoaderXML {
        +ShapeLoaderXML(ShapeLoaderCOR* next)
        +loadShape()
    }

    class Vector2D {
        -double x
        -double y
        +operator+()
        +operator*()
        +operator-()
        +string()
        +operator<<()
        +rotation(const Vector2D & rotationCenter,
            const RadianAngle & rotationAngle)
        +homothety(const Vector2D & invariantPoint,
            const double & homothetyRatio)
    }
}

package Serveur {
    class Thread

    package DrawingServer {
        class DrawingServer {
            +main()
        }
        class DrawingThread {
            +run()
        }
    }

    package ShapeDrawer {
        interface ShapeDrawer {
            +{abstract}draw(String request)
        }

        class ShapeDrawerLink {
            +ShapeDrawerLink(ShapeDrawerLink next)
            +{abstract} drawShape(String request, Frame frame)
            +draw(String request)
            +getGraphics(Frame frame)
        }

        class SegmentDrawer {
            +SegmentDrawer(ShapeDrawerLink next)
            +drawShape(String request, Frame frame)
        }

        class CircleDrawer {
            +CircleDrawer(ShapeDrawerLink next)
            +drawShape(String request, Frame frame)
        }

        class PolygoneDrawer {
            +PolygoneDrawer(ShapeDrawerLink next)
            +drawShape(String request, Frame frame)
        }

        class ShapeNotRecognizedException

    }
}

Shape <|-- Cercle
Shape <|-- Segment
Shape <|-- Triangle
Shape <|-- Polygone
DrawingServer *-- "0,N" DrawingThread
Thread <|-- DrawingThread
ShapeDrawer <|-- ShapeDrawerLink
ShapeDrawerLink o-- "0, 1" ShapeDrawerLink
ShapeDrawerLink <|-- SegmentDrawer
ShapeDrawerLink <|-- CircleDrawer
ShapeDrawerLink <|-- PolygoneDrawer
DrawingThread *-- "1" ShapeDrawer
ComposedShape o-- "1, N" Shape
Shape <|-- ComposedShape
SaveVisitor <|-- SaveXMLVisitor
DrawingVisitor <|-- ServerDrawer
ShapeLoader <|-- ShapeLoaderCOR
ShapeLoaderCOR o-- "0, N" ShapeLoaderCOR
ShapeLoaderCOR <|-- ShapeLoaderText
ShapeLoaderCOR <|-- ShapeLoaderXML
Cercle o--> "1" Vector2D
Segment o--> "2" Vector2D
Triangle o--> "3" Vector2D
Polygone o--> "3, N" Vector2D
ShapeDrawer .. ShapeNotRecognizedException : << Throws >>
ServerDrawer o-- "1" Socket
Socket *-- "1" Socket
@enduml
